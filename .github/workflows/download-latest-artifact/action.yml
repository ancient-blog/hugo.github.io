name: Download the latest artifacts
description: "Download the latest artifacts with artifact name."

inputs:
  owner:
    description: 'Your owner'
    default: 'ancient-blog'
    required: false
    type: string
  repo:
    description: 'Your repository'
    default: 'hugo.github.io'
    required: false
    type: string
  name:
    description: 'Your Artifact name'
    default: 'voicevox-data'
    required: false
    type: string
  token:
    description: 'A personal access token from the caller workflow'
    required: true
  path:
    description: 'path to artifact'
    default: '${{ github.workspace }}/artifact'
    required: false
    type: string

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install jq -y
    - name: Get Artifacts using the GitHub API
      shell: bash
      run: |
        curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ inputs.owner }}/${{ inputs.repo }}/actions/artifacts \
          -o artifacts.json
        # GitHub APIからarchive_download_urlを取得し、日付でソートして最新のアーティファクトを取得
        cat artifacts.json | jq '[.artifacts[] | select(.name == "'"${{ inputs.name }}"'")]' | jq 'sort_by(.created_at) | reverse' | jq -r 'map(.name, .archive_download_url, .created_at)'| head -n5
        archive_download_url=$(cat artifacts.json | jq '[.artifacts[] | select(.name == "'"${{ inputs.name }}"'")]' | jq  -r 'sort_by(.created_at) | reverse | .[0].archive_download_url')
        echo ${archive_download_url}

        if [ -z "$archive_download_url" ]; then
          echo "No matching artifacts found for ${{ inputs.name }}"
          exit 1
        fi
        curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          ${archive_download_url} \
          -o artifacts.zip
        cat artifacts.zip | head -n5
      continue-on-error: true  # 初回で成果物がない場合エラーを許可します
    - name: Unzip Artifact
      shell: bash
      run: |
        if [ -f artifacts.zip ]; then
          unzip artifacts.zip -d ${{ inputs.path }}
          rm artifacts.zip
        else
          echo "artifacts.zip not found, skipping unzip."
        fi