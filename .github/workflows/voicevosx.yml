name: Voicevox Audio Generator

on:
  workflow_call:
  push:
    paths:
      - 'content/voicevox/**'
env:
  ARTIFACT: artifact
  VOICEVOX_PATH: content/voicevox
  YOUR_PAT: ${{ secrets.ANCIENT_BLOG_PAT}}
  YOUR_OWNER: ancient-blog
  YOUR_REPO: hugo.github.io
  YOUR_ARTIFACT_NAME: voicevox-data
  DOCKER_BUILDKIT: 1  # Dockerビルドキットを有効にする

jobs:
  generate_voicevox_audio:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq -y
      - name: Get Artifacts using the GitHub API
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${YOUR_PAT}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${YOUR_OWNER}/${YOUR_REPO}/actions/artifacts > artifacts.json

          # GitHub APIからarchive_download_urlを取得し、日付でソートして最新のアーティファクトを取得
          archive_download_url=$(cat artifacts.json | jq -r '.artifacts | sort_by(.created_at) | reverse | .[0].archive_download_url')
          if [ -z "$archive_download_url" ]; then
            echo "No matching artifacts found for ${YOUR_ARTIFACT_NAME}"
            exit 1
          fi
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${YOUR_PAT}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${archive_download_url} > artifacts.zip
          ls -lh
        continue-on-error: true  # 初回で成果物がない場合エラーを許可します
      - name: Unzip Artifact
        run: |
          if [ -f artifacts.zip ]; then
            unzip artifacts.zip -d ${ARTIFACT}
          else
            echo "artifacts.zip not found, skipping unzip."
          fi

      - name: Docker Set Up
        run: |
          docker-compose up -d --build
          docker ps -a
          docker-compose ps
          ping -c 3 172.81.0.3

      - name: Create Destination Folder
        run: |
          if [ ! -d "${ARTIFACT}" ]; then
            mkdir -p "${ARTIFACT}"
          fi

#      - name: Prepare a Shell Script
#        run: |
#          mv ./content/voicevox/voicevox.sh .
#          chmod +x voicevox.sh

      - name: Run the Shell Script
        run: |
          changed_files=$(git log --stat -1 --pretty=format:"" | grep -o -E 'content/voicevox/[^/]+\.txt')
          echo "変更されたファイル:"
          echo "$changed_files"

          for filename in $changed_files
          do
            # jsonファイルの作成
            curl -s \
              -X POST \
              "localhost:50021/audio_query?speaker=3" \
              --get --data-urlencode text@"$filename" \
              -o query.json
            ls -lh
            echo "Created query.json for $filename"
    
            cat query.json | grep -o -E "\"kana\":\".*\"" | xargs -I {} echo {}
    
            # wavファイルの作成
            curl -s \
              -H "Content-Type: application/json" \
              -X POST \
              -d @query.json \
              "localhost:50021/synthesis?speaker=3" \
              -o audio.wav
            ls -lh   
            # 拡張子.txtを削除して新しい変数に格納
            filename_without_extension=$(echo "$filename" | sed 's/\.txt$//')

            # wavファイルのリネーム
            mv audio.wav "${filename_without_extension}.wav"

            echo "Renamed audio.wav to ${filename_without_extension}.wav"

            echo "Finished processing $filename"
        done

      - name: Copy Files
        run: |
          if [ -n "$(find "${{ github.workspace }}/${VOICEVOX_PATH}" -maxdepth 1 -type f -name '*.wav')" ]; then
            cp "${{ github.workspace }}/${VOICEVOX_PATH}"/*.wav "${ARTIFACT}/"
          else
            echo "No .wav files found. Skipping copy."
          fi
          ls ${ARTIFACT} -lh

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: voicevox-data
          path: |
            ${{ github.workspace }}/artifact
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`